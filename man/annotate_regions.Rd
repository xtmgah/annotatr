% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/intersect.R
\name{annotate_regions}
\alias{annotate_regions}
\title{A function to intersect user data with annotation data}
\usage{
annotate_regions(regions, annotations, genome, ignore.strand = TRUE,
  use.score)
}
\arguments{
\item{regions}{The GRanges object of the user-data returned by read_bed().}

\item{annotations}{A character vector of annotations to overlap with user-data. Valid annotation codes can be found with supported_annotations(). The "basic_genes" shortcut annotates regions to the 1-5Kb, promoter, 5UTR, exon, intron, and 3UTR knownGene regions. The "detailed_genes" shortcut annotates regions to the 1-5Kb, promoter, 5UTR exon/intron, CDS exon/intron, and 3UTR exon/intron knownGene regions. The "cpgs" shortcut annotates regions to the CpG islands, shores, shelves, and interCGI regions. NOTE: basic_genes and detailed_genes annotations cannot be done at the same time.}

\item{genome}{One of the genomes in supported_genomes(). Should match argument used in read_bed()().}

\item{ignore.strand}{Logical variable indicating whether strandedness should be respected in findOverlaps(). Default FALSE.}

\item{use.score}{Logical variable. Include the "score" for each genomic region in the tabulated results. Score can mean a variety of things, e.g. percent methylation of a CpG/region or fold-change of a ChIP-seq peak.}
}
\value{
A \code{dplyr::tbl_df} with columns from the GenomicRanges object for the regions and corresponding annotations.
}
\description{
Given a GRanges object constructed from user supplied data with read_bed()(),
and desired annotation overlaps, use GenomicRanges::findOverlaps() to return a
Hits object indicating which elements of the user-data (query) intersect which
elements of the annotation data (subject).
}
\examples{
# A very simple example with only 3 genomic regions
bed = system.file('extdata', 'test_intersect.bed', package = 'annotatr')
annotations = c('hg19_cpg_islands','hg19_cpg_shores','hg19_knownGenes_promoters')

d = read_bed(file = bed, genome = 'hg19', stranded = FALSE)

i = annotate_regions(
  regions = d,
  annotations = annotations,
  genome = 'hg19',
  ignore.strand = TRUE,
  use.score = FALSE)

# A more complicated example using Gm12878 Pol2 ChIP-seq from ENCODE and an annotation shortcut
bed = system.file('extdata', 'Gm12878_Pol2.narrowPeak.gz', package = 'annotatr')
annotations = c('basic_genes')

d = read_bed(file = bed, genome = 'hg19', stranded = FALSE)

i = annotate_regions(
  regions = d,
  annotations = annotations,
  genome = 'hg19',
  ignore.strand = TRUE,
  use.score = FALSE)

}

